import {
  Button,
  Text,
  Container,
  Flex,
  FormControl,
  FormLabel,
  Input,
  SimpleGrid,
  useToast,
  Image,
  IconButton,
  useColorModeValue,
  Center,
  Icon,
  Heading,
  Box,
} from "@chakra-ui/react";
import Head from "next/head";
import { useFormik } from "formik";
import { useEffect, useState } from "react";
import {
  addDoc,
  collection,
  deleteDoc,
  doc,
  getDocs,
  updateDoc,
} from "firebase/firestore";
import { database } from "../../services/firebase";
import Iframe from "react-iframe";
import { format, parseISO } from "date-fns";
import { EditIcon, AddIcon, QuestionIcon } from "@chakra-ui/icons";
import Nav from "../../components/Navbar";
import { ConfirmationModal } from "../../components/ConfirmationModal";

interface typeVideo {
  name: string;
  link: string;
}

export default function Home() {
  const [data, setData] = useState<any>([]);
  const databaseRef = collection(database, "videos");
  const toast = useToast();
  const timeElapsed = Date.now();
  const today = new Date(timeElapsed);
  const [selectedVideo, setSelectedVideo] = useState<any>([]);
  const bg = useColorModeValue("gray.100", "gray.900");

  const formik = useFormik({
    initialValues: {
      name: "",
      link: "",
    },
    onSubmit: (values) => {
      if (selectedVideo.id) {
        handleUpdateVideo(values);
      } else {
        handleAddVideo(values);
      }
    },
  });

  const handleAddVideo = (values: typeVideo) => {
    if (!values) {
      return;
    }
    if (!values.link.includes("youtube")) {
      toast({
        title: `Adicione um video do youtube!`,
        position: "top-right",
        status: "warning",
        isClosable: true,
      });
      return;
    }
    values.link = values.link.replace("/watch?v=", "/embed/");
    addDoc(databaseRef, { ...values, createdAt: today.toISOString() })
      .then(() => {
        toast({
          title: `Video adicionado com sucesso!`,
          position: "top-right",
          status: "success",
          isClosable: true,
        });
      })
      .catch((err) => {
        toast({
          title: `Erro ao adicionar video :(`,
          position: "top-right",
          status: "error",
          isClosable: true,
        });
      });
    setSelectedVideo([]);
  };

  useEffect(() => {
    const getData = async () => {
      await getDocs(databaseRef).then((response) => {
        return setData(
          response.docs.map((data) => {
            return { ...data.data(), id: data.id };
          })
        );
      });
    };
    getData();
  }, [selectedVideo]);

  const handleUpdateVideo = async (values: any) => {
    if (!selectedVideo.id) {
      return;
    }
    let fieldToEdit = doc(database, "videos", selectedVideo.id);
    await updateDoc(fieldToEdit, values)
      .then(() => {
        toast({
          title: `video editado com sucesso!`,
          position: "top-right",
          status: "success",
          isClosable: true,
        });
      })
      .catch((err) => {
        toast({
          title: `Erro ao editar o video :(`,
          position: "top-right",
          status: "error",
          isClosable: true,
        });
      });
    setSelectedVideo([]);
  };

  const handleDeleteVideo = (id: string) => {
    let fieldToDelete = doc(database, "videos", id);
    deleteDoc(fieldToDelete)
      .then(() => {
        toast({
          title: `Video excluido com sucesso!`,
          position: "top-right",
          status: "success",
          isClosable: true,
        });
      })
      .catch((err) => {
        toast({
          title: `Erro ao excluir o video :(`,
          position: "top-right",
          status: "error",
          isClosable: true,
        });
      });
    setSelectedVideo([]);
  };

  useEffect(() => {
    if (selectedVideo.id) {
      formik.setValues({
        link: selectedVideo.link,
        name: selectedVideo.name,
      });
    } else {
      formik.setValues({
        link: "",
        name: "",
      });
    }
  }, [selectedVideo]);

  return (
    <div>
      <Head>
        <title>Cadastro de videos</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <Nav />
      <Container h="100vh" maxW="1300px" mt={50} mb={5}>
        <form onSubmit={formik.handleSubmit}>
          <SimpleGrid
            columns={{ base: 1, md: 2 }}
            alignItems="end"
            spacing={5}
            mb={6}
          >
            <FormControl>
              <FormLabel>Nome do video</FormLabel>
              <Input
                name="name"
                variant="flushed"
                placeholder="Nome do video"
                focusBorderColor="#51127f"
                onChange={formik.handleChange}
                value={formik.values.name}
              />
            </FormControl>
            <FormControl>
              <FormLabel>
                Link do video (youtube)
                <Icon ml="3" cursor="pointer">
                  <QuestionIcon />
                </Icon>
              </FormLabel>
              <Input
                name="link"
                variant="flushed"
                focusBorderColor="#51127f"
                onChange={formik.handleChange}
                value={formik.values.link}
                placeholder="Exemple: https://www.youtube.com/watch?v=xFtquKPf7Ug"
              />
            </FormControl>
          </SimpleGrid>
          <Flex gap={2} mb={10} justifyContent="end">
            {selectedVideo.id && (
              <Button colorScheme={"red"} onClick={() => setSelectedVideo([])}>
                Cancelar
              </Button>
            )}
            {formik.values.name && formik.values.link && (
              <Button
                type="submit"
                colorScheme={"green"}
                rightIcon={<AddIcon />}
              >
                {selectedVideo.id ? "Editar Video" : "Inserir Video"}
              </Button>
            )}
          </Flex>
        </form>
        <SimpleGrid columns={{ base: 1, md: 2 }} spacing={3}>
          {data?.map((item: any, i: number) => (
            <Flex
              gap={5}
              key={i}
              bg={bg}
              rounded={"10px"}
              w="100%"
              p={3}
              direction={{ base: "column", md: "row" }}
              justifyContent="space-between"
              boxShadow="rgba(60, 64, 67, 0.3) 0px 1px 2px 0px, rgba(60, 64, 67, 0.15) 0px 1px 3px 1px"
            >
              <Flex gap={5} direction={{ base: "column", md: "row" }}>
                <Box width={{ base: "100%", md: "250px" }}>
                  <Iframe
                    url={item.link}
                    styles={{ borderRadius: "10px" }}
                    width="100%"
                    height="150px"
                  />
                </Box>
                <Center flexDirection={"column"} alignItems="start" gap={2}>
                  <Heading size={"md"}>{item.name}</Heading>
                  <Text size={"sm"}>
                    Updated: {format(parseISO(item?.createdAt), "dd/MM/yyyy")}
                  </Text>
                </Center>
              </Flex>
              <Center gap={2}>
                <IconButton
                  onClick={() => setSelectedVideo(item)}
                  aria-label={""}
                  icon={<EditIcon />}
                />
                <ConfirmationModal
                  name={item.name}
                  onConfirm={() => handleDeleteVideo(item.id)}
                />
              </Center>
            </Flex>
          ))}
        </SimpleGrid>
      </Container>
    </div>
  );
}
